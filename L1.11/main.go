// L1.11
// Пересечение множеств
// Реализовать пересечение двух неупорядоченных множеств
// (например, двух слайсов) — т.е.
// вывести элементы, присутствующие и в первом, и во втором.

// Пример:
// A = {1,2,3}
// B = {2,3,4}
// Пересечение = {2,3}

// Дедлайн — 1 нояб, 02:59

// Решение:

// Для реализации алгоритма нахождения пересечения
// наиболее эффективным способом, используем контейнеры map

package main

import "fmt"

func main() {

	slice := []int{1, 6, 2, 7, 2, 9, 1, 4, 5, -1, 10, 12, -7}
	slice2 := []int{3, 7, 2, -7, 1, 4, 8, 3, 2}

	m := make(map[int]struct{}) // используем пустые структуры для запоминания только ключей (имитация сета)

	// занесение значений первого слайса в мапу
	for _, value := range slice {
		m[value] = struct{}{} // запоминаем значения из первого слайса в ключах мапы
	}
	result := make(map[int]struct{}) // результирующая мапа для сохранения пересечения

	// обнаружение пересечения второго значений слайса с ключами в мапе из первого слайса
	for _, value := range slice2 {
		_, ok := m[value] // если в мапе есть ключ value, будет ok = true, что означает что это значение value есть в обоих слайсах
		if ok {
			result[value] = struct{}{} // запоминаем пересечение в результирующую мапу
		}
	}

	fmt.Printf("\nПервый слайс: \n%+v\n", slice)

	fmt.Printf("\nВторой слайс: \n%+v\n", slice2)

	fmt.Printf("\nПересечение слайсов:\n")

	// печать пересечения
	for key := range result {
		fmt.Printf("%v ", key)
	}
}

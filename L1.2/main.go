// Задание L1.2:
// Конкурентное возведение в квадрат

// Написать программу, которая конкурентно рассчитает
// значения квадратов чисел, взятых из массива [2,4,6,8,10],
// и выведет результаты в stdout.

// Подсказка: запусти несколько горутин, каждая из которых возводит число в квадрат.

// Дедлайн — 1 окт, 02:59

// Решение:

// | объявляем группу ожидания
// | для сохранения счётчика
// | запущенных горутин
//         |
//         v
// | создаём массив чисел
//         |
//         v
// | запускаем цикл по массиву
//         |
//         v
// | внутри цикла для каждого
// | числа запускаем в отдельной
// | горутине функцию печати
// | квадрата числа. Но перед этим
// | инкрементируем группу
// | ожидания на +1 горутину
//         |
//         v
// | Внутри функции печати
// | квадрата числа включаем
// | обязательно при выходе
// | из функции  декремент -1
// | горутину из счётчика
// | группы ожидания
//         |
//         v
// | После отработки цикла
// | включаем ожидание
// | завершения всех
// | горутин перед
// | выходом из main

package main

import (
	"fmt"
	"sync"
)

var wg sync.WaitGroup // объявляем группу ожидания

func square(num uint) {
	defer wg.Done() // при выходе из функции обязательно декрементируем -1 горутину из группы ожидания
	fmt.Println(num * num)
}

func main() {
	// массив чисел
	mas := [...]uint{2, 4, 6, 8, 10}

	// цикл по массиву
	for _, value := range mas {
		wg.Add(1)        // инкрементируем +1 горутину в группу ожидания
		go square(value) // запускаем горутину на выполнение
	}

	wg.Wait() // ожидаем завершения всех горутин перед окончанием главной функции

}
